package org.batfish.specifier.parboiled;

import static com.google.common.base.MoreObjects.toStringHelper;
import static org.batfish.specifier.parboiled.CommonParser.SET_OP_DIFFERENCE;
import static org.batfish.specifier.parboiled.CommonParser.SET_OP_INTERSECTION;
import static org.batfish.specifier.parboiled.CommonParser.SET_OP_UNION;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.collect.ImmutableList;
import java.util.Collection;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import org.batfish.datamodel.answers.AutocompleteSuggestion;
import org.batfish.datamodel.answers.AutocompleteSuggestion.SuggestionType;

/**
 * A class that represents an auto complete suggestion generated by {@link ParboiledAutoComplete}
 */
@ParametersAreNonnullByDefault
final class ParboiledAutoCompleteSuggestion {

  static final String SET_PREFIX_DIFFERENCE = "Set difference";
  static final String SET_PREFIX_INTERSECTION = "Set intersection";
  static final String SET_PREFIX_UNION = "Set union";

  /** The anchor based on which we are auto completing. */
  @Nonnull private final Anchor.Type _anchorType;

  /** Index in the input query string where the suggestion text should be inserted */
  private final int _insertionIndex;

  /** Actual text of the suggestion */
  @Nonnull private final String _text;

  ParboiledAutoCompleteSuggestion(String text, int insertionIndex, Anchor.Type anchorType) {
    _text = text;
    _insertionIndex = insertionIndex;
    _anchorType = anchorType;
  }

  @Override
  public boolean equals(Object o) {
    if (!(o instanceof ParboiledAutoCompleteSuggestion)) {
      return false;
    }
    return Objects.equals(_anchorType, ((ParboiledAutoCompleteSuggestion) o)._anchorType)
        && Objects.equals(_insertionIndex, ((ParboiledAutoCompleteSuggestion) o)._insertionIndex)
        && Objects.equals(_text, ((ParboiledAutoCompleteSuggestion) o)._text);
  }

  @Nonnull
  public Anchor.Type getAnchorType() {
    return _anchorType;
  }

  public int getInsertionIndex() {
    return _insertionIndex;
  }

  @Nonnull
  public String getText() {
    return _text;
  }

  @Override
  public int hashCode() {
    return Objects.hash(_anchorType, _insertionIndex, _text);
  }

  static AutocompleteSuggestion toAutoCompleteSuggestion(
      ParboiledAutoCompleteSuggestion suggestion) {
    return AutocompleteSuggestion.builder()
        .setText(suggestion._text)
        .setInsertionIndex(suggestion._insertionIndex)
        .setDescription(completeDescriptionIfNeeded(suggestion))
        .setHint(suggestion._anchorType.getHint())
        .setSuggestionType(suggestion._anchorType.getSuggestionType())
        .build();
  }

  /**
   * The description of set operations is incomplete because the same anchor is used for union,
   * difference, and intersection. This function completes the description based on the suggestion
   * text.
   */
  @VisibleForTesting
  static String completeDescriptionIfNeeded(ParboiledAutoCompleteSuggestion suggestion) {
    if (suggestion._anchorType.getSuggestionType() != SuggestionType.SET_OPERATOR) {
      return suggestion._anchorType.getDescription();
    }
    switch (suggestion._text) {
      case SET_OP_DIFFERENCE:
        return SET_PREFIX_DIFFERENCE + suggestion._anchorType.getDescription();
      case SET_OP_INTERSECTION:
        return SET_PREFIX_INTERSECTION + suggestion._anchorType.getDescription();
      case SET_OP_UNION:
        return SET_PREFIX_UNION + suggestion._anchorType.getDescription();
      default:
        return suggestion._anchorType.getDescription();
    }
  }

  static List<AutocompleteSuggestion> toAutoCompleteSuggestions(
      Collection<ParboiledAutoCompleteSuggestion> suggestions) {
    return suggestions.stream()
        .map(ParboiledAutoCompleteSuggestion::toAutoCompleteSuggestion)
        .collect(ImmutableList.toImmutableList());
  }

  @Override
  public String toString() {
    return toStringHelper(getClass())
        .add("text", _text)
        .add("insertionIndex", _insertionIndex)
        .add("anchorType", _anchorType)
        .toString();
  }
}
