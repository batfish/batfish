package org.batfish.specifier.parboiled;

import static com.google.common.base.Preconditions.checkArgument;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Sets;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import org.batfish.datamodel.Protocol;
import org.batfish.specifier.ApplicationSpecifier;
import org.parboiled.errors.InvalidInputError;
import org.parboiled.parserunners.ReportingParseRunner;
import org.parboiled.support.ParsingResult;

/** An {@link ApplicationSpecifier} that resolves based on the AST generated by {@link Parser}. */
@ParametersAreNonnullByDefault
public final class ParboiledApplicationSpecifier implements ApplicationSpecifier {

  @ParametersAreNonnullByDefault
  private final class ApplicationAstNodeToApplications
      implements ApplicationAstNodeVisitor<Set<Protocol>> {

    ApplicationAstNodeToApplications() {}

    @Nonnull
    @Override
    public Set<Protocol> visitNameApplicationAstNode(
        NameApplicationAstNode nameApplicationAstNode) {
      return ImmutableSet.of(nameApplicationAstNode.getProtocol());
    }

    @Nonnull
    @Override
    public Set<Protocol> visitUnionApplicationAstNode(
        UnionApplicationAstNode unionApplicationAstNode) {
      return Sets.union(
          unionApplicationAstNode.getLeft().accept(this),
          unionApplicationAstNode.getRight().accept(this));
    }
  }

  private final ApplicationAstNode _ast;

  ParboiledApplicationSpecifier(ApplicationAstNode ast) {
    _ast = ast;
  }

  /**
   * Returns an {@link ApplicationSpecifier} based on {@code input} which is parsed as {@link
   * Grammar#APPLICATION_SPECIFIER}.
   *
   * @throws IllegalArgumentException if the parsing fails or does not produce the expected AST
   */
  public static ParboiledApplicationSpecifier parse(String input) {
    ParsingResult<AstNode> result =
        new ReportingParseRunner<AstNode>(
                Parser.instance().getInputRule(Grammar.APPLICATION_SPECIFIER))
            .run(input);

    if (!result.parseErrors.isEmpty()) {
      throw new IllegalArgumentException(
          ParserUtils.getErrorString(
              input,
              Grammar.APPLICATION_SPECIFIER,
              (InvalidInputError) result.parseErrors.get(0),
              Parser.ANCHORS));
    }

    AstNode ast = ParserUtils.getAst(result);
    checkArgument(
        ast instanceof ApplicationAstNode,
        "ParboiledApplicationSpecifier requires an ApplicationSpecifier input");

    return new ParboiledApplicationSpecifier((ApplicationAstNode) ast);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof ParboiledApplicationSpecifier)) {
      return false;
    }
    return Objects.equals(_ast, ((ParboiledApplicationSpecifier) o)._ast);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_ast);
  }

  @Override
  public Set<Protocol> resolve() {
    return _ast.accept(new ApplicationAstNodeToApplications());
  }
}
