package org.batfish.specifier.parboiled;

import static com.google.common.base.Preconditions.checkArgument;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Sets;
import java.util.Collection;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import org.batfish.specifier.EnumSetSpecifier;
import org.parboiled.errors.InvalidInputError;
import org.parboiled.parserunners.ReportingParseRunner;
import org.parboiled.support.ParsingResult;

/** An {@link EnumSetSpecifier} that resolves based on the AST generated by {@link Parser}. */
@ParametersAreNonnullByDefault
public final class ParboiledEnumSetSpecifier implements EnumSetSpecifier {

  @ParametersAreNonnullByDefault
  private final class EnumSetAstNodeToValues implements EnumSetAstNodeVisitor<Set<String>> {

    EnumSetAstNodeToValues() {}

    @Nonnull
    @Override
    public Set<String> visitValueEnumSetAstNode(ValueEnumSetAstNode valueEnumSetAstNode) {
      return ImmutableSet.of(valueEnumSetAstNode.getValue());
    }

    @Nonnull
    @Override
    public Set<String> visitRegexEnumSetAstNode(RegexEnumSetAstNode regexEnumSetAstNode) {
      return _enumValues.stream()
          .filter(prop -> regexEnumSetAstNode.getPattern().matcher(prop).find())
          .collect(ImmutableSet.toImmutableSet());
    }

    @Nonnull
    @Override
    public Set<String> visitUnionEnumSetAstNode(UnionEnumSetAstNode unionEnumSetAstNode) {
      return Sets.union(
          unionEnumSetAstNode.getLeft().accept(this), unionEnumSetAstNode.getRight().accept(this));
    }
  }

  private final EnumSetAstNode _ast;

  private final Collection<String> _enumValues;

  ParboiledEnumSetSpecifier(EnumSetAstNode ast, Grammar grammar) {
    _ast = ast;
    _enumValues = Parser.getEnumValues(grammar);
  }

  /**
   * Returns an {@link EnumSetSpecifier} based on parsing the {@code input} according to the
   * specified grammar
   *
   * @throws IllegalArgumentException if the parsing fails or does not produce the expected AST
   */
  public static ParboiledEnumSetSpecifier parse(String input, Grammar grammar) {
    ParsingResult<AstNode> result =
        new ReportingParseRunner<AstNode>(Parser.instance().getInputRule(grammar)).run(input);

    if (!result.parseErrors.isEmpty()) {
      throw new IllegalArgumentException(
          ParserUtils.getErrorString(
              input, grammar, (InvalidInputError) result.parseErrors.get(0), Parser.ANCHORS));
    }

    AstNode ast = ParserUtils.getAst(result);
    checkArgument(
        ast instanceof EnumSetAstNode,
        "Unexpected AST when parsing '%s' as grammar '%s': %s",
        input,
        grammar,
        ast);

    return new ParboiledEnumSetSpecifier((EnumSetAstNode) ast, grammar);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof ParboiledEnumSetSpecifier)) {
      return false;
    }
    return Objects.equals(_ast, ((ParboiledEnumSetSpecifier) o)._ast);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_ast);
  }

  @Override
  public Set<String> resolve() {
    return _ast.accept(new EnumSetAstNodeToValues());
  }
}
