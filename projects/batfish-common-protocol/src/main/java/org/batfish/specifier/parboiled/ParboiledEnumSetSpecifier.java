package org.batfish.specifier.parboiled;

import static com.google.common.base.Preconditions.checkArgument;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Sets;
import java.util.Collection;
import java.util.Objects;
import java.util.Set;
import javax.annotation.Nonnull;
import javax.annotation.ParametersAreNonnullByDefault;
import org.batfish.specifier.EnumSetSpecifier;
import org.parboiled.errors.InvalidInputError;
import org.parboiled.parserunners.ReportingParseRunner;
import org.parboiled.support.ParsingResult;

/** An {@link EnumSetSpecifier} that resolves based on the AST generated by {@link Parser}. */
@ParametersAreNonnullByDefault
public final class ParboiledEnumSetSpecifier<T>
    implements EnumSetSpecifier<T>, EnumSetAstNodeVisitor<Set<T>> {

  @Nonnull
  @Override
  @SuppressWarnings("unchecked")
  public <T1> Set<T> visitValueEnumSetAstNode(ValueEnumSetAstNode<T1> valueEnumSetAstNode) {
    T value = (T) valueEnumSetAstNode.getValue();
    return ImmutableSet.of(value);
  }

  @Nonnull
  @Override
  public Set<T> visitRegexEnumSetAstNode(RegexEnumSetAstNode regexEnumSetAstNode) {
    return _allValues.stream()
        .filter(prop -> regexEnumSetAstNode.getPattern().matcher(prop.toString()).find())
        .collect(ImmutableSet.toImmutableSet());
  }

  @Nonnull
  @Override
  public Set<T> visitUnionEnumSetAstNode(UnionEnumSetAstNode unionEnumSetAstNode) {
    return Sets.union(
        unionEnumSetAstNode.getLeft().accept(this), unionEnumSetAstNode.getRight().accept(this));
  }

  private final EnumSetAstNode _ast;

  private final Collection<T> _allValues;

  ParboiledEnumSetSpecifier(EnumSetAstNode ast, Collection<T> allValues) {
    _ast = ast;
    _allValues = allValues;
  }

  /**
   * Returns an {@link EnumSetSpecifier} based on parsing the {@code input} according to the
   * specified grammar
   *
   * @throws IllegalArgumentException if the parsing fails or does not produce the expected AST
   */
  public static <T> ParboiledEnumSetSpecifier<T> parse(String input, Collection<T> allValues) {
    ParsingResult<AstNode> result =
        new ReportingParseRunner<AstNode>(Parser.instance().getEnumSetRule(allValues)).run(input);

    if (!result.parseErrors.isEmpty()) {
      throw new IllegalArgumentException(
          ParserUtils.getErrorString(
              input,
              Grammar.ENUM_SET_SPECIFIER,
              (InvalidInputError) result.parseErrors.get(0),
              Parser.ANCHORS));
    }

    AstNode ast = ParserUtils.getAst(result);
    checkArgument(
        ast instanceof EnumSetAstNode,
        "Unexpected AST when parsing '%s' as enum grammar: %s",
        input,
        ast);

    return new ParboiledEnumSetSpecifier<>((EnumSetAstNode) ast, allValues);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof ParboiledEnumSetSpecifier)) {
      return false;
    }
    return Objects.equals(_ast, ((ParboiledEnumSetSpecifier) o)._ast);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_ast);
  }

  @Override
  public Set<T> resolve() {
    return _ast.accept(this);
  }
}
