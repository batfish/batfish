load-questions questions/stable

# validate aaaAuthenticationLogin
test -raw tests/questions/stable/aaaAuthenticationLogin.ref validate-template aaaAuthenticationLogin nodes=".*"

# validate definedStructures
test -raw tests/questions/stable/definedStructures.ref validate-template definedStructures nodes="n1", names="m1", types="t1"

# validate fileParseStatus
test -raw tests/questions/stable/fileParseStatus.ref validate-template fileParseStatus

# validate ipOwners
test -raw tests/questions/stable/ipOwners.ref validate-template ipOwners duplicatesOnly=false

# validate edges
test -raw tests/questions/stable/edges.ref validate-template edges edgeType="bgp", nodes=".*", remoteNodes=".*"

# validate ipsecSessionStatus
test -raw tests/questions/stable/ipsecSessionStatus.ref validate-template ipsecSessionStatus nodes="n1", remoteNodes="n2", status=".*"

# validate parseWarning
test -raw tests/questions/stable/parseWarning.ref validate-template parseWarning

# validate referencedStructures
test -raw tests/questions/stable/referencedStructures.ref validate-template referencedStructures nodes="n1", names="m1", types="t1"

# validate routes
test -raw tests/questions/stable/routes.ref validate-template routes network="1.1.1.1/24", nodes=".*", vrfs=".*", rib="main", protocols=".*"

# test testfilters
test  -raw tests/questions/stable/testfilters.ref validate-template testfilters headers={"srcIps": "1.1.1.1/32"}, filters=".*",  nodes=".*", startLocation="node1"

# test undefinedReferences
test -raw tests/questions/stable/undefinedReferences.ref validate-template undefinedreferences nodes=".*"

# validate unusedstructures
test -raw tests/questions/stable/unusedStructures.ref validate-template unusedstructures nodes=".*"
