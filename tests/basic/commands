#this file assumes that we are running from top-level source directory

add-batfish-option haltonconverterror
add-batfish-option haltonparseerror
add-batfish-option verboseparse

# some ref tests using example network
test -compareall tests/basic/init.ref init-snapshot networks/example/live basic-example
test tests/basic/parse-status.ref get fileparsestatus
test -compareall tests/basic/genDp.ref generate-dataplane
test -raw tests/basic/topology.ref get-object testrig_pojo_topology
test tests/basic/viModel.ref get viModel
test tests/basic/nodes-summary.ref get nodes summary=true
test tests/basic/nodes.ref get nodes summary=false
test tests/basic/neighbors-summary.ref get neighbors neighborTypes=["ebgp","ibgp","ospf","layer3"]
test tests/basic/neighbors.ref get neighbors style=verbose, neighborTypes=["ebgp","ibgp","ospf","layer1","layer2","layer3"]
test tests/basic/routes.ref get routes

# some ref tests using delta snapshot
test -compareall tests/basic/init-candidate.ref init-delta-snapshot networks/example/candidate basic-example-candidate
test tests/basic/nodes-diff.ref get nodes summary=false, differential=true

# Everything below here is to be converted into regular unit tests in some form.
test tests/basic/aclReachability.ref get aclReachability
test tests/basic/bgpSessionStatus.ref get bgpsessionstatus type="ebgp.*", status="missing.*"
test tests/basic/bgpSessionStatusNew.ref get bgpsessionstatusnew nodes="as2.*", remoteNodes="as3.*", includeEstablishedCount=true
test tests/basic/compareSameName.ref get compareSameName
test tests/basic/error.ref -error get error
test tests/basic/isisLoopbacks.ref get isisLoopbacks
test tests/basic/ospfSessionCheck.ref get ospfsessioncheck
test tests/basic/ospfStatus.ref get ospfstatus interfacesSpecifier="Loopback.*", status=".*passive"
test tests/basic/selfAdjacencies.ref get selfAdjacencies
test tests/basic/testfilters.ref get testFilters headers={"dstIps": "1.1.1.1"}, nodes="host.*", filters="filter.*"
test tests/basic/oldtraceroute-1-2.ref get oldtraceroute ingressNode="as1core1", dst="host1"
test tests/basic/oldtraceroute-1-2-ignoreAcls.ref get oldtraceroute ingressNode="as1core1", dst="host1", ignoreAcls=true
test tests/basic/oldtraceroute-2-1.ref get oldtraceroute ingressNode="host2", dst="1.0.1.1"
test tests/basic/traceroute-1-2.ref get traceroute startLocation="enter(as1core1)", headers={"dstIps": "ofLocation(host1)"}
test tests/basic/traceroute-2-1.ref get traceroute startLocation="host2", headers={"dstIps": "1.0.1.1"}
test tests/basic/multipath-host1.ref get reachability type="multipath", ingressNodeRegex="host1", srcIps=["2.128.0.0"], dstIps=["3.0.1.2"], ipProtocols=["TCP"], srcPorts=[0], dstPorts=[0]
test tests/basic/multipath-host2.ref get reachability type="multipath", ingressNodeRegex="host2", srcIps=["2.128.0.0"], dstIps=["1.0.1.1"], ipProtocols=["UDP"], srcPorts=[0], dstPorts=[0]
test tests/basic/bgpAsnUse.ref get bgpasnuse minCount=2
test tests/basic/uniqueIpAssignments.ref get uniqueIpAssignments
test tests/basic/bgpadvertisements.ref get bgpadvertisements nodeRegex = "as2border2"
test tests/basic/outliers.ref get outliers
test tests/basic/outliers2.ref get outliers hypothesis="sameName"
test tests/basic/outliers3.ref get outliers hypothesis="sameServers"
test tests/basic/outliers-verbose.ref get outliers verbose=True

# takes toooo long. need to constrain to be useful.
# test -comparesummary tests/basic/reachability-pathdiff.ref get reachability type=pathdiff

# init-environment
test -compareall tests/basic/init-env.ref init-environment newEnvironmentName="newenv", interfaceBlacklist=[{hostname="as2border2",interface="GigabitEthernet0/0"}]
test -compareall tests/basic/genDp-env.ref generate-delta-dataplane
# failure case with non-existent interface -- but the stack trace returned in the answer is bad mojo the test
#test tests/basic/init-env-bad.ref init-environment newEnvironmentName="newenv-bad", interfaceBlacklist=[{hostname="as2border2",interface="GigabitEthernet"}]

# disable-as-reuse
init-snapshot tests/basic/networks/dc-as-reuse basic-dc-as-reuse
test tests/basic/routes-dc-as-reuse.ref get routes

# iptables
test -compareall tests/basic/example-iptables-init.ref init-snapshot networks/example-iptables
test tests/basic/example-iptables-reachability.ref get reachability ingressNodeRegex="z1-.*", dstIps=["10.0.4.20","10.0.4.21"], srcIps=["10.0.3.0/24"], actions=["DROP"]
test tests/basic/example-iptables-transit.ref get reachability notIngressNodeRegex="z1-.*", dstIps=["10.0.3.0/24"], notDstIps=["10.0.3.1"], notTransitNodes="z1-firewall", actions=["ACCEPT"]
test tests/basic/example-iptables-protection.ref get reachability notIngressNodeRegex="z1-.*", dstIps=["10.0.3.20","10.0.3.21"], notSrcIps=["10.0.3.0/24", "10.0.4.0/24"], notIpProtocols=["OSPF"], actions=["ACCEPT"]

# z3 timeout - 1 millisecond
add-batfish-option z3timeout 1
init-snapshot networks/fattree-examples/fattree2
test tests/basic/z3timeout.ref -error get reachability dstIps=['70.0.2.0'], specialize=false

# data-plane related diff tests
test -compareall tests/basic/init-with-ba.ref init-snapshot networks/example/live-with-bgp-announcements example-with-ba
set-delta-snapshot basic-example-candidate
test tests/basic/routes-diff.ref get routes differential=true
