#this file assumes that we are running from top-level source directory

add-batfish-option haltonconverterror
add-batfish-option haltonparseerror
add-batfish-option verboseparse

# example testrig
test tests/basic/init.ref init-testrig test_rigs/example
test tests/basic/init-delta.ref init-delta-testrig test_rigs/example-with-delta
test tests/basic/genDp.ref generate-dataplane
test tests/basic/genDp-delta.ref generate-delta-dataplane
test tests/basic/aclReachability.ref get aclReachability
test tests/basic/assert.ref get assert assertions=[{"assertion":"(eq 15 (pathsize '$.nodes[*]'))"},{"assertion":"(eq 0 (pathsize '$.nodes[\"as1border\"]'))"},{"assertion":"(not (eq 0 (pathsize '$.nodes[\"as1border1\"]')))"}, {"assertion":"(eq (pathsize '$.nodes[*].aaaSettings.newModel') (pathsize '$.nodes[*].aaaSettings[?(@.newModel == true)]'))"}]
test tests/basic/bgpSessionCheck.ref get bgpSessionCheck
test tests/basic/compareSameName.ref get compareSameName
test tests/basic/error.ref -error get error
test tests/basic/ipsecVpnCheck.ref get ipsecVpnCheck
test tests/basic/isisLoopbacks.ref get isisLoopbacks
test tests/basic/neighbors.ref get neighbors neighborTypes=["ebgp","ibgp","ospf","lan"]
test tests/basic/roleNeighbors.ref get neighbors neighborTypes=["ebgp","ibgp","ospf","lan"], style="role"
test tests/basic/nodes-summary.ref get nodes summary=true
test tests/basic/nodes.ref get nodes summary=false
test tests/basic/nodes-diff.ref get nodes summary=false, differential=true
test tests/basic/ospfLoopbacks.ref get ospfLoopbacks
test tests/basic/ospfSessionCheck.ref get ospfsessioncheck
test tests/basic/pairwiseVpnConnectivity.ref get pairwiseVpnConnectivity
test tests/basic/routes.ref get routes
test tests/basic/routes-diff.ref get routes differential=true
test tests/basic/selfAdjacencies.ref get selfAdjacencies
test tests/basic/traceroute-1-2.ref get traceroute ingressNode="as1core1", dstIp="2.128.0.101"
test tests/basic/traceroute-2-1.ref get traceroute ingressNode="host2", dstIp="1.0.1.1"
test tests/basic/multipath-host1.ref get reachability type="multipath", ingressNodeRegex="host1", srcIps=["2.128.0.0"], dstIps=["3.0.1.2"], ipProtocols=["TCP"], srcPorts=[0], dstPorts=[0]
test tests/basic/multipath-host2.ref get reachability type="multipath", ingressNodeRegex="host2", srcIps=["2.128.0.0"], dstIps=["1.0.1.1"], ipProtocols=["UDP"], srcPorts=[0], dstPorts=[0]
test tests/basic/undefinedReferences.ref get undefinedReferences
test tests/basic/uniqueIpAssignments.ref get uniqueIpAssignments
test tests/basic/unusedStructures.ref get unusedStructures
test tests/basic/bgpadvertisements.ref get bgpadvertisements nodeRegex = "as2border2"
test tests/basic/outliers.ref get outliers

# example2 testrig
test tests/basic/init-example2.ref init-testrig test_rigs/example2
test tests/basic/inferRoles.ref get inferRoles

# disable-as-reuse
test tests/basic/init-dc-as-reuse.ref init-testrig test_rigs/dc-as-reuse
test tests/basic/routes-dc-as-reuse.ref get routes

# snat
test tests/basic/init-snat.ref init-testrig test_rigs/snat
test tests/basic/traceroute-snat.ref get traceroute ingressNode=host1, dstIp="1.2.3.4"

# parsing unit-tests through nodes question
test tests/basic/init-unit-tests.ref init-testrig test_rigs/unit-tests
test tests/basic/nodes-unit-tests.ref get nodes summary=false

