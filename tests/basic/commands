#this file assumes that we are running from top-level source directory

add-batfish-option haltonconverterror
add-batfish-option haltonparseerror
add-batfish-option verboseparse

# example testrig
test tests/basic/init.ref init-testrig test_rigs/example basic-example
test tests/basic/init-delta.ref init-delta-testrig test_rigs/example-with-delta basic-example-delta
test tests/basic/genDp.ref generate-dataplane
test tests/basic/genDp-delta.ref generate-delta-dataplane
test tests/basic/topology.ref get-object testrig_pojo_topology
test tests/basic/aclReachability.ref get aclReachability
test tests/basic/assert.ref get assert assertions=[{"assertion":"(eq 15 (pathsize '$.nodes[*]'))"},{"assertion":"(eq 0 (pathsize '$.nodes[\"as1border\"]'))"},{"assertion":"(not (eq 0 (pathsize '$.nodes[\"as1border1\"]')))"}, {"assertion":"(eq (pathsize '$.nodes[*].aaaSettings.newModel') (pathsize '$.nodes[*].aaaSettings[?(@.newModel == true)]'))"}]
test tests/basic/bgpSessionCheck.ref get bgpSessionCheck
test tests/basic/compareSameName.ref get compareSameName
test tests/basic/error.ref -error get error
test tests/basic/ipsecVpnCheck.ref get ipsecVpnCheck
test tests/basic/isisLoopbacks.ref get isisLoopbacks
test tests/basic/neighbors.ref get neighbors neighborTypes=["ebgp","ibgp","ospf","lan"]
test tests/basic/roleNeighbors.ref get neighbors neighborTypes=["ebgp","ibgp","ospf","lan"], style="role"
test tests/basic/nodes-summary.ref get nodes summary=true
test tests/basic/nodes.ref get nodes summary=false
test tests/basic/nodes-diff.ref get nodes summary=false, differential=true
test tests/basic/ospfLoopbacks.ref get ospfLoopbacks
test tests/basic/ospfSessionCheck.ref get ospfsessioncheck
test tests/basic/pairwiseVpnConnectivity.ref get pairwiseVpnConnectivity
test tests/basic/roles.ref get roles
test tests/basic/roles2.ref get roles inferred=true
test tests/basic/routes.ref get routes
test tests/basic/routes-diff.ref get routes differential=true
test tests/basic/selfAdjacencies.ref get selfAdjacencies
test tests/basic/traceroute-1-2.ref get traceroute ingressNode="as1core1", dst="host1"
test tests/basic/traceroute-2-1.ref get traceroute ingressNode="host2", dst="1.0.1.1"
test tests/basic/multipath-host1.ref get reachability type="multipath", ingressNodeRegex="host1", srcIps=["2.128.0.0"], dstIps=["3.0.1.2"], ipProtocols=["TCP"], srcPorts=[0], dstPorts=[0]
test tests/basic/multipath-host2.ref get reachability type="multipath", ingressNodeRegex="host2", srcIps=["2.128.0.0"], dstIps=["1.0.1.1"], ipProtocols=["UDP"], srcPorts=[0], dstPorts=[0]
test tests/basic/undefinedReferences.ref get undefinedReferences
test tests/basic/uniqueIpAssignments.ref get uniqueIpAssignments
test tests/basic/unusedStructures.ref get unusedStructures
test tests/basic/bgpadvertisements.ref get bgpadvertisements nodeRegex = "as2border2"
test tests/basic/outliers.ref get outliers
test tests/basic/outliers2.ref get outliers hypothesis="sameName"
test tests/basic/outliers3.ref get outliers hypothesis="sameServers"
test tests/basic/outliers-verbose.ref get outliers verbose=True
test tests/basic/perRole.ref get perRole question={"class": "org.batfish.question.CompareSameNameQuestionPlugin$CompareSameNameQuestion"}
test tests/basic/perRoleOutliers.ref get perRoleOutliers hypothesis="sameName"
test tests/basic/inferPolicies.ref get inferPolicies

#this test has non-deterministic output; commented for now
#test tests/basic/reachability-pathdiff.ref get reachability type=pathdiff

# init-environment
test tests/basic/init-env.ref init-environment newEnvironmentName="newenv", interfaceBlacklist=[{hostname="as2border2",interface="GigabitEthernet0/0"}]
test tests/basic/genDp-env.ref generate-delta-dataplane
# failure case with non-existent interface -- but the stack trace returned in the answer is bad mojo the test
#test tests/basic/init-env-bad.ref init-environment newEnvironmentName="newenv-bad", interfaceBlacklist=[{hostname="as2border2",interface="GigabitEthernet"}]

# example2 testrig
test tests/basic/init-example2.ref init-testrig test_rigs/example2 basic-example2
test tests/basic/inferRoles.ref get inferRoles
test tests/basic/roleNeighbors2.ref get neighbors neighborTypes=["ebgp","ibgp","ospf","lan"], style="role"

# disable-as-reuse
test tests/basic/init-dc-as-reuse.ref init-testrig test_rigs/dc-as-reuse basic-dc-as-reuse
test tests/basic/routes-dc-as-reuse.ref get routes

# snat
test tests/basic/init-snat.ref init-testrig test_rigs/snat basic-snat
test tests/basic/traceroute-snat.ref get traceroute ingressNode=host1, dst="1.2.3.4"

# parsing unit-tests through nodes question
test tests/basic/init-unit-tests.ref init-testrig test_rigs/unit-tests basic-unit-tests
test tests/basic/nodes-unit-tests.ref get nodes summary=false

# iptables
test tests/basic/example-iptables-init.ref init-testrig test_rigs/example-iptables
test tests/basic/example-iptables-reachability.ref get reachability ingressNodeRegex="z1-.*", dstIps=["10.0.4.20","10.0.4.21"], srcIps=["10.0.3.0/24"], actions=["DROP"]
test tests/basic/example-iptables-transit.ref get reachability notIngressNodeRegex="z1-.*", dstIps=["10.0.3.0/24"], notDstIps=["10.0.3.1"], notTransitNodes=["z1-firewall"], actions=["ACCEPT"]
test tests/basic/example-iptables-protection.ref get reachability notIngressNodeRegex="z1-.*", dstIps=["10.0.3.20","10.0.3.21"], notSrcIps=["10.0.3.0/24", "10.0.4.0/24"], notIpProtocols=["OSPF"], actions=["ACCEPT"]

# z3 timeout - 1 millisecond
add-batfish-option z3timeout 1
init-testrig test_rigs/fattree-examples/fattree2
test tests/basic/z3timeout.ref -error get reachability dstIps=['70.0.2.0']
