{
  "class": "org.batfish.question.traceroute.TracerouteQuestion",
  "differential": false,
  "dscp": "${dscp}",
  "dst": "${dst}",
  "dstPort": "${dstPort}",
  "dstProtocol": "${dstProtocol}",
  "ecn": "${ecn}",
  "fragmentOffset": "${fragmentOffset}",
  "icmpCode": "${icmpCode}",
  "icmpType": "${icmpType}",
  "ignoreAcls": "${ignoreAcls}",
  "ipProtocol": "${ipProtocol}",
  "packetLength": "${packetLength}",
  "srcIpSpace": "${srcIpSpace}",
  "srcPort": "${srcPort}",
  "srcProtocol": "${srcProtocol}",
  "state": "${state}",
  "tcpAck": "${tcpAck}",
  "tcpCwr": "${tcpCwr}",
  "tcpEce": "${tcpEce}",
  "tcpFin": "${tcpFin}",
  "tcpPsh": "${tcpPsh}",
  "tcpRst": "${tcpRst}",
  "tcpSyn": "${tcpSyn}",
  "tcpUrg": "${tcpUrg}",
  "traceStart": "${traceStart}",
  "instance": {
    "description": "Perform a traceroute.",
    "instanceName": "traceroute",
    "longDescription": "This question performs a virtual traceroute in the network from a starting node. A destination IP and ingress (source) node must be specified. Other IP headers are given default values if unspecified.\nUnlike a real traceroute, this traceroute is directional. That is, for it to succeed, the reverse connectivity is not needed. This feature can help debug connectivity issues by decoupling the two directions.",
    "tags": [
      "dataPlane",
      "reachability",
      "traceroute"
    ],
    "variables": {
      "dscp": {
        "description": "Applied Differentiated Services Code Point (DSCP) value in IP header",
        "optional": true,
        "type": "integer"
      },
      "dst": {
        "description": "Destination hostname or IP address",
        "type": "string"
      },
      "dstPort": {
        "description": "Destination port in TCP/UDP header",
        "optional": true,
        "type": "integer"
      },
      "dstProtocol": {
        "description": "Destination named protocol (can affect IP protocol number; ICMP type/code; TCP/UDP destination port)",
        "optional": true,
        "type": "string"
      },
      "ecn": {
        "description": "Applied Explicit Congestion Notification (ECN) value in TCP header",
        "optional": true,
        "type": "integer"
      },
      "fragmentOffset": {
        "description": "Fragment offset value in IP header",
        "optional": true,
        "type": "integer"
      },
      "icmpCode": {
        "description": "ICMP code in ICMP header",
        "optional": true,
        "type": "integer"
      },
      "icmpType": {
        "description": "ICMP type in ICMP header",
        "optional": true,
        "type": "integer"
      },
      "ignoreAcls": {
        "description": "If set to True, ACLs encountered along the path are ignored",
        "optional": true,
        "type": "boolean"
      },
      "ipProtocol": {
        "description": "IP Protocol number in IP header",
        "optional": true,
        "type": "string"
      },
      "packetLength": {
        "description": "Packet length in IP header",
        "optional": true,
        "type": "integer"
      },
      "srcIpSpace": {
        "description": "Specification of source IP address in IP header",
        "optional": true,
        "type": "string"
      },
      "srcPort": {
        "description": "Source port in TCP/UDP header",
        "optional": true,
        "type": "integer"
      },
      "srcProtocol": {
        "description": "Source named protocol (can affect IP protocol number; ICMP type/code; TCP/UDP source port)",
        "optional": true,
        "type": "string"
      },
      "state": {
        "allowedValues": [
          "established",
          "invalid",
          "new",
          "related"
        ],
        "description": "Non-transitive stateful-firewall state (applies to all protocols, and is independent of TCP flags)",
        "optional": true,
        "type": "string"
      },
      "tcpAck": {
        "description": "ACK bit in TCP flags in TCP header",
        "optional": true,
        "type": "boolean"
      },
      "tcpCwr": {
        "description": "CWR bit in TCP flags in TCP header",
        "optional": true,
        "type": "boolean"
      },
      "tcpEce": {
        "description": "ECE bit in TCP flags in TCP header",
        "optional": true,
        "type": "boolean"
      },
      "tcpFin": {
        "description": "FIN bit in TCP flags in TCP header",
        "optional": true,
        "type": "boolean"
      },
      "tcpPsh": {
        "description": "PSH bit in TCP flags in TCP header",
        "optional": true,
        "type": "boolean"
      },
      "tcpRst": {
        "description": "RST bit in TCP flags in TCP header",
        "optional": true,
        "type": "boolean"
      },
      "tcpSyn": {
        "description": "SYN bit in TCP flags in TCP header",
        "optional": true,
        "type": "boolean"
      },
      "tcpUrg": {
        "description": "URG bit in TCP flags in TCP header",
        "optional": true,
        "type": "boolean"
      },
      "traceStart": {
        "description": "Location to start tracing from",
        "minLength": 1,
        "type": "string"
      }
    }
  }
}
