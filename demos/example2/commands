echo # This demo operates over the example2 test rig in the batfish repository.
echo # It assumes that it is being run from the top-level directory in the repository.

echo # Do this first, so you have the relevant shell commands
echo # % source tools/batfish_function.sh

echo # Select one of the two options below
echo ## If you want to run analysis locally
echo ## % allinone -runmode interactive
echo #
echo ## If you want to run against www.batfish.org
echo ## % batfish_client -runmode interactive

echo # load the testing
init-testrig networks/example2

echo ################
echo # The configurations are converted to JSON-based  vendor-independent data model:
get nodes summary=False, nodeRegex='dc1-border-01'

echo # Some checks can be expressed as JsonPath queries on this JSON.
echo # For instance, to check whether the MTU of each interface is 1500,
echo # we look for all interfaces on all nodes with an MTU that is NOT 1500:
get nodespath paths=[{"path":"$.nodes[*].interfaces[*][?(@.mtu != 1500)].mtu", "suffix":True}]

echo #####################
echo # our logical representation of the network that can be queried in various ways.
echo # we have many queries and can write more

echo # for example, we can ask simple questions on adjacencies
get neighbors
echo # --> can help ensure that adjacencies are as expected (i.e., interfaces are properly configured)

echo # we can also ask for protocol-level adjacencies
get neighbors neighborTypes=["ebgp"]
echo # --> can help ensure that protocol sessions are configured correctly

echo ##############
echo # we can also do other simple checks based on best practices of our network

echo # this will check if all interface ips are unique
get uniqueipassignments

echo # this will check if all loopbacks are being correctly announced within OSPF
get ospfstatus

echo ################
echo # more interestingly, we can also ask questions about data flow, i.e., the end-to-end impact of all configuration

echo # for example, we can see how dc1-host-01-01 reaches a particular IP address
echo # the query will take time if the dataplane has not been computed before
get traceroute ingressNode="dc1-host-01-01", dst="1.0.2.2"
echo # --> unlike a regular traceroute we show multipath and interface information

echo # suppose dc1-host-01-01 (2.128.0.101) is running DNS and we want to ensure that the server is reachable
echo # can easily do this using protocol-specific traceroutes
get traceroute ingressNode="dc1-border-01", dst="2.128.0.101", dstProtocol="DNS"

echo ################
echo # while the above could be done using testing/emulation, we alone can be comprehensive

echo # for example, find *all* (starting node, packet header) combinations where the DNS server is unreachable
get reachability actions=["DROP"], dstIps=["2.128.0.101"], dstProtocols=["DNS"]
echo # --> the output shows outsiders with spoofed source addresses cannot reach the DNS server (good)
echo # --> but also shows that a bad ACL on dc1-host-01-02 is blocking access (bad)

echo # another example: dc1-host-01-02 (2.128.1.101) is running SSH. we can run similar queries to learn who cannot reach it
echo # but we can also ensure that non-ssh traffic can *never* reach host-01-02
get reachability actions=["ACCEPT"], dstIps=["2.128.1.101"], notDstProtocols=["SSH"]
echo # --> all good! hard to guarantee with testing but easy for us

echo # another example: we also want to ensure that outsiders can *never* reach the SSH server
echo # we have ACLs on DC border routers to prevent this. to test that things are correctly implemented:
get reachability actions=["ACCEPT"], dstIps=["2.128.1.101"], dstProtocols=["SSH"], ingressNodeRegex="bb(1|2)-border-01"
echo # --> buggy ACL on dc1-border-02!

echo #############
echo # comparing two sets of configs (e.g., current + planned) is a powerful debugging aid

echo # initialize the delta environment and generate its dataplane
init-delta-testrig networks/example2-with-delta

echo # any earlier query can be executed differentially, to see if how behavior differs
get neighbors differential=true

echo # a particularly powerful query: reachability diff between the two environments
get reachability type=reduced
echo # --> any collateral damage is easy to see

echo #############
echo # fault-tolerance can be ensured in a similar manner by studying the impact of failures

echo # this command creates a network view after an interface failure
init-environment interfaceBlacklist=[{hostname="dc1-border-02",interface="GigabitEthernet0/0"}]

echo # we can see if reachability changes at all after this failure
get reachability type=reduced
echo # --> any lack of fault tolerance is easy to see

echo "##############"
echo "# heuristics to uncover bugs"
get aclreachability nodeRegex="dc1-.*"
get comparesamename nodeRegex="dc1-.*"


echo ##############
echo # finally, sanity checking can be done in the data plane too (e.g., valley-free routing in the DC, number of hops)

echo # a powerful example: multipath consistency.
get reachability type=multipath
echo # --> will catch hard-to-debug, bad interactions between routing and ACLs
